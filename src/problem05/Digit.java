package problem05;

public class Digit {
    //хранимая цифра
    private byte dig;
    //высота цифроместа
    private static final byte height = 8;
    //шаблоны написания цифр
    private static final byte[][][] View =
            {
                    {//0
                            {0, 0, 1, 1, 0, 0},
                            {0, 1, 0, 0, 1, 0},
                            {1, 0, 0, 0, 0, 1},
                            {1, 0, 0, 0, 0, 1},
                            {1, 0, 0, 0, 0, 1},
                            {1, 0, 0, 0, 0, 1},
                            {0, 1, 0, 0, 1, 0},
                            {0, 0, 1, 1, 0, 0}
                    },
                    {//1
                            {0, 0, 0, 1, 0, 0},
                            {0, 0, 1, 1, 0, 0},
                            {0, 1, 0, 1, 0, 0},
                            {0, 0, 0, 1, 0, 0},
                            {0, 0, 0, 1, 0, 0},
                            {0, 0, 0, 1, 0, 0},
                            {0, 0, 0, 1, 0, 0},
                            {1, 1, 1, 1, 1, 1}
                    },
                    {//2
                            {0, 1, 1, 1, 1, 0},
                            {1, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 1, 0},
                            {0, 0, 1, 1, 0, 0},
                            {0, 1, 0, 0, 0, 0},
                            {1, 0, 0, 0, 0, 0},
                            {1, 1, 1, 1, 1, 1}
                    },
                    {//3
                            {0, 1, 1, 1, 1, 0},
                            {1, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 1},
                            {0, 0, 0, 1, 1, 0},
                            {0, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 1},
                            {1, 0, 0, 0, 0, 1},
                            {0, 1, 1, 1, 1, 0}
                    },
                    {//4
                            {1, 0, 0, 0, 0, 1},
                            {1, 0, 0, 0, 0, 1},
                            {1, 0, 0, 0, 0, 1},
                            {1, 0, 0, 0, 0, 1},
                            {1, 1, 1, 1, 1, 1},
                            {0, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 1}
                    },
                    {//5
                            {1, 1, 1, 1, 1, 1},
                            {1, 0, 0, 0, 0, 0},
                            {1, 0, 0, 0, 0, 0},
                            {1, 1, 1, 1, 1, 0},
                            {0, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 1},
                            {1, 1, 1, 1, 1, 0}
                    },
                    {//6
                            {0, 1, 1, 1, 1, 1},
                            {1, 0, 0, 0, 0, 0},
                            {1, 0, 0, 0, 0, 0},
                            {1, 1, 1, 1, 1, 0},
                            {1, 0, 0, 0, 0, 1},
                            {1, 0, 0, 0, 0, 1},
                            {1, 0, 0, 0, 0, 1},
                            {0, 1, 1, 1, 1, 0}
                    },
                    {//7
                            {1, 1, 1, 1, 1, 1},
                            {0, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 1, 0},
                            {0, 0, 0, 1, 0, 0},
                            {0, 0, 1, 0, 0, 0},
                            {0, 1, 0, 0, 0, 0},
                            {0, 1, 0, 0, 0, 0}
                    },
                    {//8
                            {0, 1, 1, 1, 1, 0},
                            {1, 0, 0, 0, 0, 1},
                            {1, 0, 0, 0, 0, 1},
                            {0, 1, 1, 1, 1, 0},
                            {1, 0, 0, 0, 0, 1},
                            {1, 0, 0, 0, 0, 1},
                            {1, 0, 0, 0, 0, 1},
                            {0, 1, 1, 1, 1, 0}
                    },
                    {//9
                            {0, 1, 1, 1, 1, 0},
                            {1, 0, 0, 0, 0, 1},
                            {1, 0, 0, 0, 0, 1},
                            {0, 1, 1, 1, 1, 1},
                            {0, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 1},
                            {0, 1, 1, 1, 1, 0}
                    }
            };

    //конструктор
    public Digit(byte dig){
        if ((dig<0) || (dig>9)) dig=0; //если вдруг вышли за пределы, пусть будет 0
        this.dig = dig;
    }

    //геттер хранимой объектом цифры
    public byte getDig(){
        return this.dig;
    }

    //возвращает строку Line псевдографического представления цифры, символы Ch
    public String getViewLine(byte Line, char Ch){
        if ((Line<1) || (Line>height)) Line = 0; //если вдруг вышли за пределы, пусть будет 0
        String res = "";
        //формируем строку из массива View
        for (byte point: View[dig][Line-1]){
            if (point == 1){
                res+=Ch;
            }else{
                res+=" ";
            }
        }
        return res;
    }

    //возвращает строку Line псевдографического представления цифры, символы '*''
    public String getViewLine(byte Line){
        return getViewLine(Line, '*');
    }

}
