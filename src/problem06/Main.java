package problem06;

public class Main {

    public static void main(String[] args){
	/* Задача:
        Есть набор предметов, задаваемый заранее, предметы могут повторяться. Предмет имеет 2 параметра (обязательных,
        остальные добавлять на усмотрение):
            объем (целое значение) и
            ценность (целое значение).
        Предметы неделимы. Так же задается сейф с обязательным параметром его объема (целое значение).
        Нужно написать программу, которая наполняет сейф набором предметов таким образом, чтобы ценность этого набора
        была максимальной.


        "Задача о рюкзаке"
        ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_%D0%BE_%D1%80%D1%8E%D0%BA%D0%B7%D0%B0%D0%BA%D0%B5
	 */

        //задаем список вещей
        Item Items[] = {   new Item(1,100, "Ложка"),
                           new Item(20,6000, "Казан"),
                           new Item(500,0, "Мусор"),
                           new Item(2,10000, "Наручные часы"),
                           new Item(1,100, "Ложка"),
                           new Item(10,4000, "Микроволновка"),
                           new Item(4,120, "Хлеб"),
                           new Item(40,10000, "Стол"),
                           new Item(3,90, "Молоко"),
                           new Item(300,30300, "Холодильник"),
                           new Item(3,90, "Молоко")};
        /*Item Items[] = new Item[50000]; //внятное время выполнение для Pack() при 23, для PackDP() при 11,
                                      // PackDP1() ~ 50000
        for (int i=0;i<50000;i++)
            Items[i] = new Item((int)(Math.random()*50)+1,(int)(Math.random()*1000),"Нечто");*/

        //задаем сейф
        Safe safe = new Safe(301);


        Packer packer = new Packer(safe, Items);
        //safe = packer.Pack();   //перебор всех с составлением дерева итогов, исключая ветви заведомо превышающие объем
        //safe = packer.PackDP(); //из расчета максимальная стоимость(всех вещей, весь объем)= макс(стоимость вещи +
                                  //максимальная стоимость(всех без одной, объем без одной)), даже без составление
                                  //перечня вещей по тестам получилось медленнее предыдущего
        safe = packer.PackDP1(); //решение со skillbox.ru

        System.out.println(safe);
    }
}
